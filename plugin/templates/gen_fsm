%%%-------------------------------------------------------------------
%%% @author $author
%%% @copyright (C) $year, $company
%%% @doc
%%%
%%% @end
%%% Created : $fulldate
%%%-------------------------------------------------------------------
-module($basename).

-behaviour(gen_fsm).

%% API
-export([start_link/0]).

%% gen_fsm callbacks
-export([
         init/1,
         state_name/2,
         state_name/3,
         handle_event/3,
         handle_sync_event/4,
         handle_info/3,
         terminate/3,
         code_change/4
        ]).

-define(SERVER, ?MODULE).

-record(state, {}).
-type state() :: #state{}.

%%%-------------------------------------------------------------------
%%% API
%%%-------------------------------------------------------------------

%% @doc Creates a gen_fsm process which calls Module:init/1 to
%% initialize. To ensure a synchronized start-up procedure, this
%% function does not return until Module:init/1 has returned.
-spec start_link() -> {ok, pid()} | ignore | {error, Error::term()}.
start_link() ->
    gen_fsm:start_link({local, ?SERVER}, ?MODULE, [], []).

%%%-------------------------------------------------------------------
%%% gen_fsm callbacks
%%%-------------------------------------------------------------------

%% @doc Whenever a gen_fsm is started using gen_fsm:start/[3,4] or
%% gen_fsm:start_link/[3,4], this function is called by the new
%% process to initialize.
-spec init(Args::term()) -> {ok, StateName::atom(), state()}.
init([]) ->
    {ok, state_name, #state{}}.

%% @doc There should be one instance of this function for each possible
%% state name. Whenever a gen_fsm receives an event sent using
%% gen_fsm:send_event/2, the instance of this function with the same
%% name as the current state name StateName is called to handle
%% the event. It is also called if a timeout occurs.
-spec state_name(Event::term(), state()) -> {next_state, NextStateName::atom(), state()}.
state_name(_Event, State) ->
    {next_state, state_name, State}.

%% @doc There should be one instance of this function for each possible
%% state name. Whenever a gen_fsm receives an event sent using
%% gen_fsm:sync_send_event/[2,3], the instance of this function with
%% the same name as the current state name StateName is called to
%% handle the event.
-spec state_name(Event::term(), _From, state()) -> {reply, Reply::term(), NextStateName::atom(), state()}.
state_name(_Event, _From, State) ->
    Reply = ok,
    {reply, Reply, state_name, State}.

%% @doc Whenever a gen_fsm receives an event sent using
%% gen_fsm:send_all_state_event/2, this function is called to handle
%% the event.
-spec handle_event(Event::term(), StateName::atom(), state()) -> {next_state, NextStateName::atom(), state()>}.
handle_event(_Event, StateName, State) ->
    {next_state, StateName, State}.

%% @doc Whenever a gen_fsm receives an event sent using
%% gen_fsm:sync_send_all_state_event/[2,3], this function is called
%% to handle the event.
-spec handle_sync_event(Event::term(), _From, StateName::atom(), state()) -> {next_state, NextStateName::atom(), state()}.
handle_sync_event(_Event, _From, StateName, State) ->
    Reply = ok,
    {reply, Reply, StateName, State}.

%% @doc This function is called by a gen_fsm when it receives any
%% message other than a synchronous or asynchronous event
%% (or a system message).
-spec handle_info(Info::term(), StateName::atom(), state()) -> {next_state, NextStateName::atom(), state()}.
handle_info(_Info, StateName, State) ->
    {next_state, StateName, State}.

%% @doc This function is called by a gen_fsm when it is about to
%% terminate. It should be the opposite of Module:init/1 and do any
%% necessary cleaning up. When it returns, the gen_fsm terminates with
%% Reason. The return value is ignored.
-spec terminate(Reason::term(), StateName::atom(), state()) -> term().
terminate(_Reason, _StateName, _State) ->
    ok.

%% @doc Convert process state when code is changed
-spec code_change(_OldVsn, StateName::atom(), state(), Extra::term()) -> {ok, StateName::atom(), state()}.
code_change(_OldVsn, StateName, State, _Extra) ->
    {ok, StateName, State}.

%%%-------------------------------------------------------------------
%%% Internal functions
%%%-------------------------------------------------------------------

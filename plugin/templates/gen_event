%%%-------------------------------------------------------------------
%%% @author $author
%%% @copyright (C) $year, $company
%%% @doc
%%%
%%% @end
%%% Created : $fulldate
%%%-------------------------------------------------------------------
-module($basename).

-behaviour(gen_event).

%% API
-export([
         start_link/0,
         add_handler/0
        ]).

%% gen_event callbacks
-export([
         init/1,
         handle_event/2,
         handle_call/2,
         handle_info/2,
         terminate/2,
         code_change/3
        ]).

-define(SERVER, ?MODULE).

-record(state, {}).
-type state() :: #state{}.

%%%-------------------------------------------------------------------
%%% gen_event callbacks
%%%-------------------------------------------------------------------

%% @doc Creates an event manager
-spec start_link() -> {ok, pid()} | {error, Reason::term()}.
start_link() ->
    gen_event:start_link({local, ?SERVER}).

%% @doc Adds an event handler
-spec add_handler() -> ok | {'EXIT', Reason::term()} | term().
add_handler() ->
    gen_event:add_handler(?SERVER, ?MODULE, []).

%%%-------------------------------------------------------------------
%%% gen_event callbacks
%%%-------------------------------------------------------------------

%% @doc Whenever a new event handler is added to an event manager,
%% this function is called to initialize the event handler.
-spec init(Args) -> {ok, state()}.
init([]) ->
    {ok, #state{}}.

%% @doc Whenever an event manager receives an event sent using
%% gen_event:notify/2 or gen_event:sync_notify/2, this function is
%% called for each installed event handler to handle the event.
-spec handle_event(Event::term(), state()) -> {ok, state()} | _Other.
handle_event(_Event, State) ->
        {ok, State}.

%% @doc Whenever an event manager receives a request sent using
%% gen_event:call/3,4, this function is called for the specified
%% event handler to handle the request.
-spec handle_call(Request::term(), state()) -> {ok, Reply::term(), state()} | _Other.
handle_call(_Request, State) ->
        {ok, reply, State}.

%% @doc This function is called for each installed event handler when
%% an event manager receives any other message than an event or a
%% synchronous request (or a system message).
-spec handle_info(Info::term(), state()) -> {ok, state()} | _Other.
handle_info(_Info, State) ->
        {ok, State}.

%% @doc Whenever an event handler is deleted from an event manager, this
%% function is called. It should be the opposite of Module:init/1 and
%% do any necessary cleaning up.
-spec terminate(Reason::term(), state()) -> any().
terminate(_Reason, _State) ->
        ok.

%% @doc Convert process state when code is changed
-spec code_change(_OldVsn, state(), Extra::term()) -> {ok, state()}.
code_change(_OldVsn, State, _Extra) ->
        {ok, State}.

%%%-------------------------------------------------------------------
%%% Internal functions
%%%-------------------------------------------------------------------
